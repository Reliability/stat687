meekR CHANGELOG

===================================

***  VERSION 0.1 - 18 MAR 2015  ***

===================================

- Initial 32-bit package created (named Packjkf)




===================================

***  VERSION 0.2 - 22 MAR 2015  ***

===================================

-- Renamed package meekR

-- Removed all R functions beginning "gui..."

-- Removed all R functions beginning "xcb..."

-- Removed all R functions beginning "back.menu..."

-- Removed R function "transform" as duplicate function "wqm.transform" exists

-- Added R function "ld.to.surv" to create "Surv" object for use in the survival package

-- Added R function "survPlot" to create Kaplan-Meier plot from from the survival package

-- Added R object "meekR.data" as glossary of available data set names

-- Changed coding for frame0 & frame1 in "dotfirst.R" which generated a warning when using R CMD check

  --- was: assign("frame0", new.env(),pos=1, immediate=TRUE)
  --- now: frame0 <<- new.env(parent=emptyenv())




==================================

***  VERSION 0.3 - 1 APR 2015  ***

==================================

-- Added Luis A. Escobar as additional package author

-- Added Jason K. Freels as package creator

-- Removed all R functions beginning "back.menu..."

-- Removed all R functions containing "gui" and "menu"

-- Removed "BootFirst.R""

-- Edited calls to .Internal in "mlest.R", "wbigfile.R", and "pairs.life.data.R"

-- Compiled the 64-bit version of the pacakge with the following set of commands:

- Using 64-bit version of R

setwd("path/to/FORTRAN_file")
system("R CMD SHLIB -lgfortran myPackage.f")
    - put "myPackage.f", "myPackage.o" and "myPackage.dll" files in src package directory
setwd("~/meekR")
devtools::build()
setwd("..")
system("R CMD INSTALL --build --compile-both meekR_0.3.tar.gz")


-- Fixed the following argument extensions

*ADDTsim: warning in wqm.assign("last.sim.ADDT.ddd", data.ddd, w = 1, immediate = T): partial argument match of 'w' to 'where'
*ADDTsim: warning in wqm.assign(file.name, data.ddd, w = 1, immediate = T): partial argument match of 'w' to 'where'
*AFplot: warning in plot.paper(range(stress.vec), range(afmat), grid = grid, x.axis = relationship, y.axis = "log", ylab = paste("Acceleration Factor Relative to", stress0, stress.units), xlab = stress.units): partial argument match of 'grid' to 'grids'
ALTsim: warning in wqm.assign("last.sim.ALT.ld", data.ld, immediate =   T, w = 1): partial argument match of 'w' to 'where'
*ComputeSummarizeMultiple.SimRMDOverTime: warning in wqm.assign(results.object.name, plan.results, w = 1, immediate = T): partial argument match of 'w' to 'where'
*FitUseRateModel: warning in mfmc.mleprobplot(data.ld = UseRateX.FieldDataSource.ld, distribution = "Lognormal", x.range = c(10, 1000), y.range = c(5.1e-05, 0.94), band = "n", time.range = c(10, NA)): partial argument match of 'band' to 'band.type'
*PlotRMDQuantileEstimates: warning in plot.paper(range(time.vec), range(rmd.predicted), grid = F, xlab = "Time", ylab = "Degradation"): partial argument match of 'grid' to 'grids'
*SimulatedQuantileSummary: warning in plot.paper(x.range, y.range, grid = F, xlab = time.units, ylab = ylab): partial argument match of 'grid' to 'grids'
*SplidaOptions: warning in wqm.assign(".SplidaOptionsUsr", LocalSplidaOptionsDefaults, w = 1, immediate = T): partial argument match of 'w' to 'where'
*compare.summary.boot.npar.par.out: warning in which.boot.method.to.use(inference.on, which, mlest = boot.par.out$mlest): partial argument match of 'mlest' to 'mlest.out'
*conf.contour: warning in mixed.mtext(side = 2, line = 2, text = variable.namey, srt = 0, cex = 1.5 * cex.lab): partial argument match of 'text' to 'texts'
*dotSplidaFirst: warning in find.splida.functions(print = F): partial argument match of 'print' to 'printem'
*dotSplidaLast: warning in objects(pat = "tmpSplida*"): partial argument match of 'pat' to 'pattern'
*dotSplidaLast: warning in objects(pat = "tmpTheADDTPlanEdit*"): partial argument match of 'pat' to 'pattern'
*factor.ld.to.multiple.ld: warning in multiple.get.data.subset(data.ld, stresses[i], column = group.var): partial argument match of 'column' to 'columns'
*fit.loglin.process: warning in bound.roots2(linear.rocof.eq, start = start.gamma1, number.failures, sum.times, censor.time): partial argument match of 'start' to 'start.value'
*fit.power.and.loglin.process: warning in bound.roots2(linear.rocof.eq, start = start.gamma1, number.failures, sum.times, censor.time): partial argument match of 'start' to 'start.value'
*frame.to.ddd: warning in read.table(file.name, head = T, skip = skip): partial argument match of 'head' to 'header'
*frame.to.ld: warning in read.table(file, head = T, skip = skip, comment.char = ""): partial argument match of 'head' to 'header'
*frame.to.ld: warning in read.table(file, head = T, skip = skip): partial argument match of 'head' to 'header'
*frame.to.rd: warning in read.table(frame, head = T, skip = skip): partial argument match of 'head' to 'header'
*frame.to.rdu: warning in read.table(frame, head = T, skip = skip): partial argument match of 'head' to 'header'
*frame.to.rdx: warning in read.table(frame, head = T, skip = skip): partial argument match of 'head' to 'header'
*frame.to.rmd: warning in read.table(frame, head = T, skip = skip): partial argument match of 'head' to 'header'
*g: warning in wqm.get("relationship.vector", w = 1): partial argument match of 'w' to 'where'
*get.conditional.groupm.out: warning in wqm.assign("relationship.vector", groupm.out$relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*get.single.dist: warning in wqm.assign("relationship.vector", relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*get.single.dist.vector.x: warning in wqm.assign("relationship.vector", relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*groupi.contour: warning in multiple.get.data.subset(data.ld, stresses[i], column = group.var): partial argument match of 'column' to 'columns'
*groupm.mleprobplot: warning in wqm.assign("relationship.vector", relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*groupm.mleprobplot: warning in wqm.assign("test.groupm.out", return.list, w = 1, immediate = T): partial argument match of 'w' to 'where'
*groupm.mleprobplot: warning in multiple.get.data.subset(data.ld, stresses[i], column = 1:ncol(the.xmat)): partial argument match of 'column' to 'columns'
*kmPlot: warning in plot.paper(c(0, 400), c(0, 1), xlab = "Days", ylab = "Survival", grid = F): partial argument match of 'grid' to 'grids'
*likelihood.perspective: warning in mixed.text(x.loc(0.02), y.loc(0.2), text = variable.namey, cex = 1.5 * cex.lab): partial argument match of 'text' to 'texts'
*linax: warning in wqm.pretty(c(xmax, xmin), n = nint): partial argument  match of 'n' to 'nint'
*logax: warning in linax(xmax, xmin, nint = 5, ntick = ntick): partial  argument match of 'ntick' to 'nticks'
*logax: warning in linax(xmax, xmin, nint = 10, ntick = ntick): partial argument match of 'ntick' to 'nticks'
*logplot: warning in plot.paper(range(x), range(y), x.axis = "log", y.axis = "log", grid = F): partial argument match of 'grid' to 'grids'
*make.read.data: warning in frame.to.ld(frame = as.data.frame(y), resp = "time"): partial argument match of 'resp' to 'response.column'
*mixed.text: warning in switch(what[i], . = , e = , E = {: partial argument match of 'E' to 'EXPR'
*mixed.text: warning in if (what[i] == "e") strings[i] <- paste(esc, strings[i], sep = "") else if (what[i] == "E") strings[i] <- paste(strings[i], esc, sep = ""): partial argument match of 'E' to 'EXPR'
*mixed.text: warning in text(x + (srt.cos * trans - srt.sin * raise.cur)/uin.x, y + (srt.sin * trans + srt.cos * raise.cur)/uin.y, strings[i], font = font.cur, adj = 0, cex = cex.cur, srt = srt): partial argument match of 'E' to 'EXPR'
*mixed.text: warning in trans <- trans + stringwidth(strings[i], font = font.cur, cex = cex.cur, fill.zero = T): partial argument match of 'E' to 'EXPR'
*mixed.text: warning in raise.cur <- raise: partial argument match of 'E' to 'EXPR'
*mixed.text: warning in font.cur <- font: partial argument match of 'E' to 'EXPR'
*mixed.text: warning in cex.cur <- cex: partial argument match of 'E' to 'EXPR'
*mixed.text: warning in }, f = font.cur <- numeric.arg[i], F = font <- font.cur <- numeric.arg[i], c = cex.cur <- numeric.arg[i] * cex.arg, C = cex <- cex.cur <- numeric.arg[i] * cex.arg, h = raise.cur <- numeric.arg[i] * em, H = raise <- raise.cur <- numeric.arg[i] * em, u = raise.cur <- raise.cur + numeric.arg[i] * em, U = raise.cur <- raise <- raise + numeric.arg[i] * em, d = raise.cur <- raise.cur -  numeric.arg[i] * em, D = raise.cur <- raise <- raise - numeric.arg[i]
  * em, a = raise.cur <- raise.cur + 0.5 * numeric.arg[i] * : partial argument match of 'E' to 'EXPR'
*mixed.text: warning in em, A = raise.cur <- raise <- raise + 0.5 * numeric.arg[i] * em, v = raise.cur <- raise.cur - 0.5 * numeric.arg[i] * em, V = raise.cur <- raise <- raise - 0.5 * numeric.arg[i] * em, s = trans <- trans + 0.5 * numeric.arg[i] * em, S = trans <- trans + numeric.arg[i] * em, b = trans <- trans - 0.5 * numeric.arg[i] * em, B = trans <- trans - numeric.arg[i] * em, wqm.warning(paste("unrecognized escape code ignored: ", esc, what[i], sep = ""))): partial argument match of 'E' to 'EXPR'
*mlest.start.values: warning in lm(pseudo.response.tmp ~ the.xmat.full.tmp, weight = the.case.weights.tmp): partial argument match of 'weight' to 'weights'
*mlest.start.values: warning in lm(pseudo.response.tmp ~ -1 + the.xmat.full.tmp, weight = the.case.weights.tmp): partial argument match of 'weight' to 'weights'
*mlestlev: warning in wqm.assign("tmpdoadummy.ld", data.ld, w = 1, immediate = T): partial argument match of 'w' to 'where'
*multiple.FortranDebug: warning in match.call(expand = F): partial argument match of 'expand' to 'expand.dots'
*multiple.mleprobplot: warning in wqm.assign(file.name, data.subset.ld, w = 1, immediate = T): partial argument match of 'w' to 'where'
*multiple.probplot.sim: warning in probplot.sim(distribution = distribution, param = parameter, sample.size = sample.size.vec[j], print.samp.size = print.samp.size, x.range = x.range): partial argument match of 'param' to 'parameter'
*my.data.frame: warning in match.call(expand = FALSE): partial argument match of 'expand' to 'expand.dots'
*objdiff.by.location: warning in wqm.get(name, w = pos1): partial argument match of 'w' to 'where'
*objdiff.by.location: warning in wqm.get(name, w = pos2): partial argument match of 'w' to 'where'
*objdiff.vec: warning in wqm.get(names[i], w = pos1): partial argument match of 'w' to 'where'
*objdiff.vec: warning in exists(names[i], w = pos3): partial argument match of 'w' to 'where'
*objdiff.vec: warning in wqm.get(names[i], w = pos3): partial argument match of 'w' to 'where'
*objdiff.vec: warning in exists(names[i], w = pos2): partial argument match of 'w' to 'where'
*pairs.life.data : doaxis: warning in round(at, dig = 3): partial argument match of 'dig' to 'digits'
*plot.alt.test.plan: warning in wqm.assign("relationship.vector", relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*plot.cycles.to.real.time: warning in probplot.setup(distribution, x.range = x.range, y.range = y.range, grid = F, linear.axes = F, slope.axis = F, xlab = "Weeks of Service"): partial argument match of 'grid' to 'grids'
*plot.rmd.predicted: warning in plot.paper(range(time.vec), range(rmd.predicted), grid = F, xlab = time.units, ylab = degradation.units): partial argument match of 'grid' to 'grids'
*plot.use.rate.model: warning in npprobplot(field.data.list[[i]], distribution = distribution.cycles, band.type = "none", add = T, pch = 1, col = col.field, point.cex = cex.fact): partial argument match of 'col' to 'col.points'
*plot.use.rate.model: warning in npprobplot(lab.data.list[[i]], distribution = distribution.cycles, band.type = "none", add = T, pch = 4, col = 1, point.cex = cex.fact): partial argument match of 'col' to 'col.points'
*plot.use.rate.series.system: warning in npprobplot(use.rate.model.out$field.data.ld, distribution = distribution.cycles, band.type = "none", pch = 1, col = 1, point.cex = 1, xlab = xlab, x.range = x.range, y.range = y.range): partial argument match of 'col' to 'col.points'
*plotRiskSet: warning in plot.paper(range(theRiskSet$Times), range(the.response), xlab = xlab, ylab = ylab, grid = F): partial argument match of 'grid' to 'grids'
*plotsym: warning in plot.paper(x.range, y.range, x.axis = x.axis, y.axis = y.axis, grid = F, xlab = xlab, ylab = ylab): partial argument match of 'grid' to 'grids'
*predict.groupm.out: warning in wqm.assign("relationship.vector", relationship, w = 1, immediate = T): partial argument match of 'w' to 'where'
*probplot.setup: warning in mixed.mtext(side = 3, line = title.line, outer = F, texts = probplot.setup.title.out$new.title, adj = 0.5, cex = cex): partial argument match of 'outer' to 'outer.'
*profile.contour: warning in mixed.mtext(side = 2, line = 2, text = variable.namey, srt = 0, cex = 1.5 * cex.lab): partial argument match  of 'text' to 'texts'
*regression.profile: warning in mlest(ShelfUnfld.ld, explan.vars = 1:10, dist = "lognormal", parameter.fixed = parameter.fixed, theta.start = theta.start, kprint = 0): partial argument match of 'dist' to 'distribution'
*run.warranty.sequence: warning in read.table(paste(path, Lcode, ".dat", sep = ""), head = T): partial argument match of 'head' to 'header'
*simple.boot: warning in wqm.assign(character.input.object, mlest.out, w = 1, immediate = T): partial argument match of 'w' to 'where'
*star2.mlest: warning in wqm.assign(file.name, data.ld, w = 1, immediate = T): partial argument match of 'w' to 'where'
*summary.warranty.frame: warning in read.table(paste(path, Lcode, ".dat", sep = ""), head = T): partial argument match of 'head' to 'header'
*summary.warranty.frame: warning in frame.to.ld(warranty, response.column = "K.Miles", censor.column = "Censor", case.weight.column = "Weight", x.column = c("Months", "Period"), data.title = paste("Labor Code", as.character(warranty$Lcode[1]), "All Cars", Lcode)): partial argument match of 'x.column' to 'x.columns'
*use.rate.full.mle: warning in wqm.assign("test.use.rate.model", test.use.rate.model, w = 1, immediate = T): partial argument match of 'w' to 'where'
*use.rate.mle: warning in wqm.assign("test.use.rate.model", test.use.rate.model, w = 1, immediate = T): partial argument match of 'w' to 'where'
*user.altplan: warning in altplan(distribution = distribution, a = a, b1 = b1, perc = perc, iopts = iopts, iopta = iopta, ioptm = ioptm, pifix = pifix, pmlim = pmlim, xihold = xihold): partial argument match of 'a' to 'alt.plan.values'
*verobjdiff: warning in wqm.get(file.name, w = w1): partial argument match of 'w' to 'where'
*verobjdiff: warning in wqm.get(file.name, w = w2): partial argument match of 'w' to 'where'
*warranty.sequence: warning in frame.to.ld(warranty.sub, response.column = "K.Miles", censor.column = "Censor", case.weight.column = "Weight", x.column = c("Months", "Period"), data.title = paste("Labor Code", as.character(warranty$Lcode[1]), "Cars Built", period.list[i], "to", periodx.list[i])): partial argument match of 'x.column' to  'x.columns'
*warranty.sequence: warning in wqm.assign("tmp.warranty.gmle.out.list", warranty.gmle.out.list, w = 1, immediate = T): partial argument match of 'w' to 'where'
*wqm.plot.density.use.rate.model: warning in plot.paper(x.range = range(tvec), y.range = range(the.density * tvec), x.axis = "log", ylab = "", xlab = xlab, grid = F, y.axis = "blank", ...): partial argument match of 'grid' to 'grids'
*write.matrix: warning in my.write(t(my.matrix), file = file, ncol = ncol(my.matrix), append = appendx, sep = sep): partial argument match of 'ncol' to 'ncolumns'
*xcbSetSplidaDefault: warning in wqm.assign(".SplidaOptionsUsr", .SplidaOptionsUsr, w = 1): partial argument match of 'w' to 'where'
*zero.failure.plan: warning in plot.paper(xrange, yrange, xlab = "", ylab = "", grid = grid): partial argument match of 'grid' to 'grids'



==================================

***  VERSION 0.5 - 15 APR 2015  ***

==================================

--	Updated deprecated S functions to their R equivalents, i.e.:

my.browser( ) 	updated to browser( )
getenv( )    	  updated to Sys.getenv( )
category	      updated to factor


-- Exported Functions


export(frame.to.ld)
export(event.plot)
export(censored.data.plot)
export(distribution.plot)
export(gets.pdf.plot)
export(six.npprobplot)
export(SplidaOptions)
export(SplidaOptionsDefaults)
export(multiple.probplot.sim)
export(multiple.subset.life.data.object)
export(probpaper)
export(cdfest)
export(mleprobplot)
export(quantiles)
export(failure.probabilities)
export(expon.mle)
export(one.dim.profile)
export(profile.plot)
export(transform.struct)
export(compare.many.exponential.profiles)
export(ld.to.surv)
export(survPlot)
export(meekR.data)
export(mttf.integrate)
export(mttf.direct)
export(mttf)
export(compare.mleprobplot)
export(mlehazplot)
export(ls2.mle)
export(simple.contour)
export(profile.grid)
export(mlest)
export(simple.grid)
export(plot.simple.contour)
export(ls.mle)
export(two.dim.profile)
export(conf.contour)
export(boot.npar.par)
export(scatter.plot.boot.npar.par.out)
export(plot.boot.npar.par.out)
export(summary.boot.npar.par.out)
export(compare.summary.boot.npar.par.out)
export(boot.npar.npar)
export(plot.boot.npar.npar.out)
export(summary.boot.npar.npar.out)
export(compare.summary.boot.npar.npar.out)
export(focus.boot.npar.par.out)
export(SingleDistSim)
export(get.plan.values.from.point.and.slope)
export(failure.probabilities.plan.values)
export(life.test.simulation)
export(get.plan.values.from.two.points)
export(asd.quant)
export(single.quantile.var.fact)
export(asym.test.plan.properties)
export(lsinf)
export(table.lines)
export(quantile.var.fact)
export(hazard.var.fact)
export(zero.failure.plan)
export(zero.failure.k)
export(zero.failure.n)
export(zero.failure.prsd)
export(asym.sample.size)
export(multiple.simulate.type.two)
export(plot.prob.succ.demo.type2)
export(plot.prob.cs.type2)
export(gamma.mle)
export(basic.gmleprobplot)
export(egeng.mle)
export(small.interval)
export(bisa.mle)
export(igau.mle)
export(gmleprobplot)
export(gets.mle)
export(FillRegion)
export(do.profile.plot)
export(npprobplot)
export(rflm.mle)
export(CondProbInterval2)
export(CondProbInterval)
export(PredictTable)
export(CumulativePredictTable)
export(PlotCumulativePredictTable)
export(frame.to.rmd)
export(trellis.plot)
export(rmd.to.ld)
export(plot.rmd.residual)
export(specify.simple.prior)
export(make.prior)
export(get.big.posterior)
export(make.small.posterior.object)
export(summarize.posterior.or.prior)
export(plot.prediction)
export(plot.prediction.order)
export(series.effect)
export(parallel.effect)
export(parallel.dep.effect)
export(series.dep.effect)
export(mfmi.mleprobplot)
export(mfmc.mleprobplot)
export(quantiles.mfmc)
export(mfm.to.ld)
export(ld.to.mfld)
export(get.time.vector)
export(frame.to.rdu)
export(mcf)
export(mcf.plot)
export(PlotMCFandNHPP)
export(mcf.diff.plot)
export(interarrival.times)
export(interarrival.plot)
export(ar1.plot)
export(fit.power.and.loglin.process)
export(repair.tsplot)
export(renewal.plots)
export(laplace.test)
export(lewis.robinson.test)
export(milhbk189.test)
export(RiskSet)
export(plot.mcf)
export(NHPP.mle)
export(plotRiskSet)
export(profile.contour)
export(groupm.mleprobplot)
export(resid.vs.order)
export(resid.vs.fit)
export(resid.vs.explan)
export(resid.probplot)
export(plot.alt.fit)
export(groupi.mleprobplot)
export(groupi.contour)
export(quantiles.groupm.out)
export(failure.probabilities.groupm.out)
export(resid.vs.explan.multiple)
export(gmlest)
export(get.alt.plan.values.from.two.points)
export(get.alt.test.plan.direct)
export(plot.alt.test.plan)
export(AF)
export(AFplot)
export(six.groupi.mleprobplot)
export(summary.multiple.mlest.out)
export(six.groupm.mleprobplot)
export(plot.groupm.out)
export(get.alt.plan.values.from.slope.and.point)
export(get.alt.test.plan.direct)
export(ALT.vcv)
export(evaluate)
export(simulate.ALT.test.plan)
export(unfold.alt.plan)
export(evaluate.alt.test.plan)
export(ALT.plot.time.v.x)
export(ALT.plot.FracFail.v.Time)
export(plot.vpm.vs.size)
export(plot.volt.vs.size)
export(get.alt.test.plan.direct)
export(altplan)
export(evaluate.alt.test.plan)
export(print.default)
export(marginalize.sim)
export(plot.marginals.sim)
export(plot.joint.sim)
export(plot.joint.and.marginals.sim)
export(summarize.simultation.results)
export(altsimReturnFrame)
export(varone.grid)
export(plot.rmd.average)
export(plot.rmd.residual)
export(frame.to.ddd)
export(groupi.Dest.Degrad.indivplots)
export(groupi.Dest.Degrad.oneplot)
export(groupm.Dest.Degrad)
export(groupi.Dest.Degrad)
export(plot.groupm.Dest.Degrad.out)
export(quantiles.groupm.Dest.Degrad.out)
export(failure.probabilities.groupm.Dest.Degrad.out)
export(dest.degrad.mle)
export(get.sub.model.dest.degrad.mle.out)
export(plot.Dest.Degrad.data)
export(groupi.Dest.Degrad)
export(plot.groupi.Dest.Degrad.out)
export(groupi.Dest.Degrad.indivplots)
export(groupi.Dest.Degrad.oneplot)
export(get.allocation.matrix)
export(get.ADDT.plan.values)
export(hframe.to.vframe)
export(simulate.ADDT.test.plan)
export(ADDT.plot.time.v.x)
export(ADDT.plot.Deg.v.Time)
export(ADDT.plot.FracFail.v.Time)
export(ADDT.vcv)
export(evaluate.ADDT.test.plan)
export(plot.ADDT.sample.size)
export(print.ADDT.test.plan)
export(plot.ADDT.test.plan)
export(get.ADDT.test.plan.hframe)
export(marginalize.sim)
export(plot.marginals.sim)
export(plot.joint.sim)
export(plot.joint.and.marginals.sim)
export(pseudo.model)
export(f.ADDT.stableparam)
export(f.ADDT.origparam)


devtools::install_github("auburngrads/meekR",auth_token="01911688d1f5f5cc745b19dbbc56a8c205eaf0fc")

==================================

***  VERSION 0.6 - 23 APR 2015  ***

==================================

deleted function 'add.to.data.frame' moved inside function 'single.rmd.to.ld'

deleted function 'add.to.posterior' moved inside function 'get.big.posterior'

deleted function 'af' moved inside function 'temp.profile.plot'

deleted function 'AF' moved inside function 'AFplot'

deleted functions 'LockAxes', 'as.LockAxes', 'ULockAxes', 'TLockAxes', 'ResetLockAxes' as they were not called by any other functions

deleted functions 'is.LockAxes', 'is.AxesAgree', 'SetAxesRange': moved inside function 'GetAxesRange'

deleted function 'not.na'

deleted functions 'not.stripped', 'not.stripped<-': moved inside function 'groupm.mleprobplot'

deleted function 'is.max': moved inside functions 'regression.profile' and 'ci.from.profile'

deleted function 'is.min': moved inside functions 'liklihood.grid' and 'is.maxele'

deleted function 'is.maxele': moved inside functions 'summary.boot.npar.npar.out' and 'z.eval'

deleted function 'xxpostscript'

deleted functions 'mins', 'maxs': moved inside function 'scatter.plot.boot.npar.par.out'

deleted function 'get.distribution': moved inside function 'summary.mfm.multiple.mlest.out'

deleted function 'is.Splus8plus'

deleted function 'is.near.integer': moved inside function 'splida.sanity.life.data'

deleted function 'is.windows'

deleted function 'my.cat'

deleted function 'wqm.hist': moved inside functions 'summary.boot.npar.npar.out' and 'focus.boot.npar.npar.out'

deleted function 'fw.phibml'

deleted function 'logcheck'

deleted function 'det.matrix'

=====================================

***  VERSION 0.6.5 - 26 JUL 2015  ***

=====================================

Added exports for chapter 5 distributions

export(pbisa)
export(qbisa)
export(dbisa)
export(pgeng)
export(qgeng)
export(dgeng)
export(pigau)
export(qigau)
export(digau)
export(pgets)
export(qgets)
export(dgets)
export(pgoma)
export(qgoma)
export(dgoma)
export(pegengl)
export(qegengl)
export(degengl)

=====================================

***  VERSION 0.6.8 - 7 AUG 2015  ***

=====================================

Merged into simple.contour

- Relative likelihood plotting for exponential 
- Profile Likelihood for log-location scale distributions
- Relative likelihood surfaces 2D & 3D 





=====================================

***  VERSION 0.9.2 - 20 APR 2016  ***

=====================================

gfortran commands to be used from the Command Prompt

gfortran -O2 -fimplicit-none -Wall -Wline-truncation -Wcharacter-truncation -Wsurprising -Waliasing -Wimplicit-interface -Wunused-parameter -fcheck=all -std=f2008 -pedantic -fbacktrace SMRD.f90

Instructions found from the following website:

http://stackoverflow.com/questions/26315969/fortran-error-unexpected-statement-function-statement-at-1